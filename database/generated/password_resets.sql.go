// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: password_resets.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createPasswordReset = `-- name: CreatePasswordReset :one
INSERT INTO password_reset_tokens (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, token, expires_at, used
`

type CreatePasswordResetParams struct {
	UserID    int32     `db:"user_id" json:"user_id"`
	Token     string    `db:"token" json:"token"`
	ExpiresAt time.Time `db:"expires_at" json:"expires_at"`
}

type CreatePasswordResetRow struct {
	ID        int32        `db:"id" json:"id"`
	UserID    int32        `db:"user_id" json:"user_id"`
	Token     string       `db:"token" json:"token"`
	ExpiresAt time.Time    `db:"expires_at" json:"expires_at"`
	Used      sql.NullBool `db:"used" json:"used"`
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) (CreatePasswordResetRow, error) {
	row := q.db.QueryRowContext(ctx, createPasswordReset, arg.UserID, arg.Token, arg.ExpiresAt)
	var i CreatePasswordResetRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
	)
	return i, err
}

const getPasswordResetByToken = `-- name: GetPasswordResetByToken :one
SELECT id, user_id, token, expires_at, used, created_at FROM password_reset_tokens
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetPasswordResetByToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetByToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
		&i.CreatedAt,
	)
	return i, err
}

const markPasswordResetUsed = `-- name: MarkPasswordResetUsed :exec
UPDATE password_reset_tokens
SET used = TRUE
WHERE id = $1
`

func (q *Queries) MarkPasswordResetUsed(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markPasswordResetUsed, id)
	return err
}
