// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_verification.sql

package generated

import (
	"context"
	"time"
)

const createEmailVerification = `-- name: CreateEmailVerification :one
INSERT INTO email_verification_tokens (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, token, expires_at, used, created_at
`

type CreateEmailVerificationParams struct {
	UserID    int32     `db:"user_id" json:"user_id"`
	Token     string    `db:"token" json:"token"`
	ExpiresAt time.Time `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateEmailVerification(ctx context.Context, arg CreateEmailVerificationParams) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, createEmailVerification, arg.UserID, arg.Token, arg.ExpiresAt)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
		&i.CreatedAt,
	)
	return i, err
}

const getEmailVerificationByToken = `-- name: GetEmailVerificationByToken :one
SELECT id, user_id, token, expires_at, used, created_at 
FROM email_verification_tokens 
WHERE token = $1
`

func (q *Queries) GetEmailVerificationByToken(ctx context.Context, token string) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerificationByToken, token)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
		&i.CreatedAt,
	)
	return i, err
}

const markEmailVerificationUsed = `-- name: MarkEmailVerificationUsed :exec
UPDATE email_verification_tokens 
SET used = TRUE 
WHERE id = $1
`

func (q *Queries) MarkEmailVerificationUsed(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markEmailVerificationUsed, id)
	return err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec
UPDATE users 
SET email_verified = TRUE 
WHERE id = $1
`

func (q *Queries) VerifyUserEmail(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, verifyUserEmail, id)
	return err
}
