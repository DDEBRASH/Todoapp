// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package generated

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, done, user_id, deadline)
VALUES ($1, false, $2, $3)
RETURNING id, title, done, user_id, deadline
`

type CreateTaskParams struct {
	Title    string       `db:"title" json:"title"`
	UserID   int32        `db:"user_id" json:"user_id"`
	Deadline sql.NullTime `db:"deadline" json:"deadline"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Title, arg.UserID, arg.Deadline)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Done,
		&i.UserID,
		&i.Deadline,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1 AND user_id = $2
`

type DeleteTaskParams struct {
	ID     int32 `db:"id" json:"id"`
	UserID int32 `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.ExecContext(ctx, deleteTask, arg.ID, arg.UserID)
	return err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, done, user_id, deadline
FROM tasks
WHERE user_id = $1
ORDER BY id DESC
`

func (q *Queries) ListTasks(ctx context.Context, userID int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Done,
			&i.UserID,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDone = `-- name: SetDone :one
UPDATE tasks
SET done = $2
WHERE id = $1 AND user_id = $3
RETURNING id, title, done, user_id
`

type SetDoneParams struct {
	ID     int32 `db:"id" json:"id"`
	Done   bool  `db:"done" json:"done"`
	UserID int32 `db:"user_id" json:"user_id"`
}

type SetDoneRow struct {
	ID     int32  `db:"id" json:"id"`
	Title  string `db:"title" json:"title"`
	Done   bool   `db:"done" json:"done"`
	UserID int32  `db:"user_id" json:"user_id"`
}

func (q *Queries) SetDone(ctx context.Context, arg SetDoneParams) (SetDoneRow, error) {
	row := q.db.QueryRowContext(ctx, setDone, arg.ID, arg.Done, arg.UserID)
	var i SetDoneRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Done,
		&i.UserID,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title = $2, deadline = $4
WHERE id = $1 AND user_id = $3
RETURNING id, title, done, user_id, deadline
`

type UpdateTaskParams struct {
	ID       int32        `db:"id" json:"id"`
	Title    string       `db:"title" json:"title"`
	UserID   int32        `db:"user_id" json:"user_id"`
	Deadline sql.NullTime `db:"deadline" json:"deadline"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.UserID,
		arg.Deadline,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Done,
		&i.UserID,
		&i.Deadline,
	)
	return i, err
}
